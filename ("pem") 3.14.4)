var pem = require("pem") 3.14.4)
Error: Cannot find module 'os-tmpdir'
Require stack:
- /app/available_modules/1620293694000/pem/lib/helper.js
- /app/available_modules/1620293694000/pem/lib/pem.js
- /app/index.js
at Module._resolveFilename in core node:internal/modules/cjs/loader — line 940
at Module._load in core node:internal/modules/cjs/loader — line 773
at Module.require in core node:internal/modules/cjs/loader — line 1012
at require in core node:internal/modules/cjs/helpers — line 93
 in pem/lib/helper.js — line 6
node.js startup…
all documents on RunKit are public
require() any package directly from npm
use arrow functions, classes, template strings, and most of ES6
await any promise instead of using callbacks (example)
create your own embedded node.js snippets
Installation
Install with npm

npm install pem
Examples
Here are some examples for creating an SSL key/cert on the fly, and running an HTTPS server on port 443. 443 is the standard HTTPS port, but requires root permissions on most systems. To get around this, you could use a higher port number, like 4300, and use https://localhost:4300 to access your server.

Basic https
var https = require('https')
var pem = require('pem')

pem.createCertificate({ days: 1, selfSigned: true }, function (err, keys) {
  if (err) {
    throw err
  }
  https.createServer({ key: keys.serviceKey, cert: keys.certificate }, function (req, res) {
    res.end('o hai!')
  }).listen(443)
})
Express
var https = require('https')
var pem = require('pem')
var express = require('express')

pem.createCertificate({ days: 1, selfSigned: true }, function (err, keys) {
  if (err) {
    throw err
  }
  var app = express()

  app.get('/', function (req, res) {
    res.send('o hai!')
  })

  https.createServer({ key: keys.serviceKey, cert: keys.certificate }, app).listen(443)
})
API
Please have a look into the API documentation.

we had to clean up a bit

Metadata
package on npmhttps://npmjs.com/package/pem
